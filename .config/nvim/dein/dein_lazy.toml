[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add='''
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_smart_case = 1
    let g:deoplete#auto_complete_delay = 0
    let g:deoplete#auto_complete_start_length = 3
    let g:deoplete#enable_refresh_always = 0
    "inoremap <silent><expr><C-h> pumvisible() ? deoplete#smart_close_popup(): "\<C-h>
'''
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add='''
    " タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ
    imap <expr><TAB>
    	 \ pumvisible() ? "\<C-n>" :
    	 \ neosnippet#expandable_or_jumpable() ?
    	 \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    	 \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    " エンターキーでスニペット挿入or補完確定orポップアップ閉じる
    imap <expr><CR>
	     \ (pumvisible() && neosnippet#expandable()) ? "\<Plug>(neosnippet_expand)" :
	     \ pumvisible() ? deoplete#close_popup() :exists('g:AutoPairsLoaded')? "\<CR>\<Plug>AutoPairsReturn" : "\<CR>"
    nmap <Leader>snip :vsplit \| :NeoSnippetEdit<CR>
    "スニペットの場所を指定
    let g:neosnippet#snippets_directory=['~/P/compro/snippets', '~/.config/nvim/snippets']

'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-clang-format'
depends = 'kana/vim-operator-user'
on_ft = 'cpp'
hook_add = '''
    let g:clang_format#style_options = {
        \ "ColumnLimit" : 0,
        \ }
    let g:clang_format#auto_format = 1
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_ft = ['cpp','python','tex']
hook_add = '''
    let g:AutoPairsShortcutFastWrap = '<C-e>'
    let g:AutoPairsShortcutToggle = '∆'
    let g:AutoPairs =
    \ {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`','$':'$'}
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = 'prabirshrestha/async.vim'
on_ft = ['python', 'cpp']
hook_add = '''
    " pip install python-language-server
    if executable('pyls')
        au User lsp_setup call lsp#register_server({
            \ 'name': 'pyls',
            \ 'cmd': {server_info->['pyls']},
            \ 'whitelist': ['python'],
            \ })
    endif
    let g:lsp_diagnostics_enabled = 0
    nmap <leader>LD :vsp<cr>:LspDefinition<cr>
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_post_source = '''
    let g:vimtex_compiler_latexmk = {
          \ 'background': 0,
          \ 'build_dir': '',
          \ 'continuous': 1,
          \ 'options': [
          \    '-pdfdvi',
          \    '-verbose',
          \    '-file-line-error',
          \    '-synctex=1',
          \    '-interaction=nonstopmode',
          \],
          \}
    let g:vimtex_view_method='skim'
    let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
    let g:vimtex_view_general_options = '-r @line @pdf @tex'
'''
