#[[plugins]]
#repo = 'jonathanfilip/vim-lucius'
#hook_add = '''
#    let g:lucius_contrast = 'high'
#    colorscheme lucius
#'''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
    "for Kölner Dom
    autocmd ColorScheme * highlight Normal ctermbg=none |
                          \hi EndOfBuffer ctermbg=none |
                          \hi MatchParen cterm=bold ctermfg=214 ctermbg=black
    autocmd VimEnter * nested colorscheme iceberg
'''



#[[plugins]]
#repo = 'haishanh/night-owl.vim'
#hook_add = '''
#    colorscheme night-owl
#'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
    if executable('make')
        let cmd = 'make'
"    elseif dein#util#_is_windows()
"        let cmd = 'tools\\update-dll-mingw'
"    endif
    let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=2 " ステータスラインを常に表示
    set showmode " 現在のモードを表示
    set showcmd " 打ったコマンドをステータスラインの下に表示
    set ruler " ステータスラインの右側にカーソルの現在位置を表示する
    let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste'],
    \             [ 'readonly', 'filename', 'modified' ],
    \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
    \ },
    \ }
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
    let g:ale_linters = {
        \ 'cpp': ['gcc'],
        \ 'python': ['flake8'],
        \ }
    let g:ale_linters_explicit = 1 " only enable explicitly selected linters
    let g:ale_sign_column_always = 1 " keep the sign gutter open

    let g:ale_fixers = {
        \ '*': ['remove_trailing_lines', 'trim_whitespace'],
        \ 'python': ['autopep8']
        \ }
    let g:ale_fix_on_save = 1

    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%severity%] %s'
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
on_source = 'ale'
hook_add = '''
    let g:lightline.component_expand = {
        \  'linter_checking': 'lightline#ale#checking',
        \  'linter_warnings': 'lightline#ale#warnings',
        \  'linter_errors': 'lightline#ale#errors',
        \  'linter_ok': 'lightline#ale#ok',
        \ }
    let g:lightline.component_type = {
        \ 'linter_checking': 'left',
        \ 'linter_warnings': 'warning',
        \ 'linter_errors': 'error',
        \ 'linter_ok': 'left',
        \ }
    let g:lightline.active = {
        \ 'right': [[
        \     'linter_checking',
        \     'linter_errors',
        \     'linter_warnings',
        \     'linter_ok'
        \ ]]
        \ }
'''


[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    " Define mappings
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
            \ denite#do_map('do_action','vsplit')
        nnoremap <silent><buffer><expr> d
            \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
            \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q
            \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> i
            \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space>
            \ denite#do_map('toggle_select').'j'
    endfunction

nmap <leader>den :Denite file/rec -split=floating<CR>
nmap <leader>ded :Denite file/rec:~/dotfiles/ -split=floating<CR>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    nnoremap rr :QuickRun<Space>-input<Space>=@+<CR>
    nnoremap <expr>:q (bufwinnr('\[quickrun\ output\]') > 0) ? 
        \":<C-u>bw! \\\[quickrun\\\ output\\\]": ":q"
    let g:quickrun_config = {
        \ "_" : {
            \ 'outputter/buffer/split'    : ':belowright 9sp',
            \ 'outputter'                 : 'buffer',
            \ 'outputter/error/error'     : 'quickfix',
            \ 'outputter/error/success'   : 'buffer',
            \ 'hook/time/enable'          : 1,
        \ },
    \ }
    let g:quickrun_config['python'] = {
        \ 'runner'    : 'vimproc',
        \ 'runner/vimproc/updatetime': 40,
        \ 'command'             : 'python3',
        \ 'hook/shebang/enable' : 0,
    \ }
    let g:quickrun_config['cpp'] = {
        \'command': 'g++',
        \'cmdopt': '-std=c++14',
    \ }
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active =1
'''
